'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _extends2 = require('babel-runtime/helpers/extends');

var _extends3 = _interopRequireDefault(_extends2);

var _getPrototypeOf = require('babel-runtime/core-js/object/get-prototype-of');

var _getPrototypeOf2 = _interopRequireDefault(_getPrototypeOf);

var _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _createClass2 = require('babel-runtime/helpers/createClass');

var _createClass3 = _interopRequireDefault(_createClass2);

var _possibleConstructorReturn2 = require('babel-runtime/helpers/possibleConstructorReturn');

var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);

var _inherits2 = require('babel-runtime/helpers/inherits');

var _inherits3 = _interopRequireDefault(_inherits2);

var _lodash = require('lodash');

var _SpotifyManager = require('../lib/SpotifyManager');

var _SpotifyManager2 = _interopRequireDefault(_SpotifyManager);

var _Icon = require('../components/Icon');

var _Icon2 = _interopRequireDefault(_Icon);

var _TrackInfo = require('../components/TrackInfo');

var _TrackInfo2 = _interopRequireDefault(_TrackInfo);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var HyperSpotifyWidgetFactory = function HyperSpotifyWidgetFactory(React) {
  var Component = React.Component;


  var Icon = (0, _Icon2.default)(React); // eslint-disable-line no-unused-vars
  var TrackInfo = (0, _TrackInfo2.default)(React); // eslint-disable-line no-unused-vars

  var skipActions = {
    previous: 'PREV',
    next: 'NEXT'
  };

  var initialState = {
    isRunning: false,
    isPlaying: false,
    track: {
      name: '',
      artist: ''
    }
  };

  return function (_Component) {
    (0, _inherits3.default)(_class, _Component);

    function _class(props) {
      (0, _classCallCheck3.default)(this, _class);

      var _this = (0, _possibleConstructorReturn3.default)(this, (_class.__proto__ || (0, _getPrototypeOf2.default)(_class)).call(this, props));

      _this.state = {
        isRunning: false,
        isPlaying: false,
        track: {
          name: '',
          artist: ''
        }
      };
      return _this;
    }

    (0, _createClass3.default)(_class, [{
      key: 'performSoundCheck',
      value: function performSoundCheck() {
        var _this2 = this;

        // console.log('SoundCheck...', new Date(), 'at', this)

        if (!this._reactInternalInstance) {
          // Kill this interval since its container does not exists anymore
          if (this.soundCheck) {
            clearInterval(this.soundCheck);
          }

          return;
        }

        _SpotifyManager2.default.isRunning().then(function (isRunning) {
          _this2.setState({ isRunning: isRunning });

          if (isRunning) {
            // Get Play/Pause state
            _SpotifyManager2.default.getState().then(function (spotifyState) {
              _this2.setState({ isPlaying: spotifyState.state === 'playing' });

              // Get Track details
              return _SpotifyManager2.default.getTrack();
            }).then(function (track) {
              // console.log('currentTrack', track)
              _this2.setState({ track: track });
            }).catch(function () {
              _this2.setState((0, _extends3.default)({}, initialState));
            });
          }
        }).catch(function () {
          _this2.setState((0, _extends3.default)({}, initialState));
        });
      }
    }, {
      key: 'togglePlayState',
      value: function togglePlayState() {
        var _this3 = this;

        var isRunning = this.state.isRunning;


        if (isRunning) {
          _SpotifyManager2.default.togglePlayPause().then(function (spotifyState) {
            _this3.setState({ isPlaying: spotifyState.state === 'playing' });
          }).catch(function () {
            _this3.setState((0, _extends3.default)({}, initialState));
          });
        }
      }
    }, {
      key: '_getSkipPromise',
      value: function _getSkipPromise(skipAction) {
        var previous = skipActions.previous,
            next = skipActions.next;


        switch (skipAction) {
          case previous:
            return _SpotifyManager2.default.previousTrack();

          case next:
            return _SpotifyManager2.default.nextTrack();
        }
      }
    }, {
      key: 'skipTo',
      value: function skipTo(skipAction) {
        var _this4 = this;

        var isRunning = this.state.isRunning;


        if (isRunning) {
          this._getSkipPromise(skipAction).then(function (track) {
            // console.log('newTrack', track)
            _this4.setState({ track: track });
          }).catch(function () {
            _this4.setState((0, _extends3.default)({}, initialState));
          });
        }
      }
    }, {
      key: 'componentDidMount',
      value: function componentDidMount() {
        var _this5 = this;

        // console.log('HyperSpotifyWidget didMount')

        if (!this.soundCheck) {
          this.soundCheck = setInterval(function () {
            return _this5.performSoundCheck();
          }, 5000);
        }

        this.performSoundCheck();
      }
    }, {
      key: 'componentWillUnmount',
      value: function componentWillUnmount() {
        // console.log('HyperSpotifyWidget willUnmount')

        if (this.soundCheck) {
          clearInterval(this.soundCheck);
        }
      }
    }, {
      key: 'shouldComponentUpdate',
      value: function shouldComponentUpdate(nextProps, nextState) {
        return !(0, _lodash.isEqual)(nextState, this.state);
      }
    }, {
      key: 'renderControls',
      value: function renderControls() {
        var _this6 = this;

        var previous = skipActions.previous,
            next = skipActions.next;
        var _state = this.state,
            isRunning = _state.isRunning,
            isPlaying = _state.isPlaying;


        if (isRunning) {
          return React.createElement(
            'div',
            { style: styles.constrolsContainerStyle },
            React.createElement(Icon, {
              iconName: 'previous',
              onClick: function onClick() {
                return _this6.skipTo(previous);
              },
              style: styles.iconStyle
            }),
            React.createElement(Icon, {
              iconName: isPlaying ? 'pause' : 'play',
              onClick: function onClick() {
                return _this6.togglePlayState();
              },
              style: styles.iconStyle
            }),
            React.createElement(Icon, {
              iconName: 'next',
              onClick: function onClick() {
                return _this6.skipTo(next);
              },
              style: styles.iconStyle
            })
          );
        }

        return React.createElement(Icon, {
          iconName: 'spotify',
          onClick: function onClick() {
            return console.log('Start spotify');
          },
          style: styles.iconStyle
        });
      }
    }, {
      key: 'render',
      value: function render() {
        var track = this.state.track;


        return React.createElement(
          'div',
          { style: styles.widgetStyle },
          this.renderControls(),
          React.createElement(TrackInfo, {
            track: track
          })
        );
      }
    }]);
    return _class;
  }(Component);
};

var styles = {
  'widgetStyle': {
    height: 30,
    fontSize: 12,
    display: 'flex',
    flexDirection: 'row',
    justifyContent: 'center',
    alignItems: 'center'
  },
  'constrolsContainerStyle': {
    display: 'flex',
    flexDirection: 'row',
    justifyContent: 'center',
    alignItems: 'center'
  },
  'iconStyle': {
    height: 16,
    width: 16,
    marginRight: 6,
    backgroundColor: '#FFF'
  }
};

exports.default = HyperSpotifyWidgetFactory;
//# sourceMappingURL=HyperSpotifyWidget.js.map