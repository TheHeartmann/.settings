{"version":3,"sources":["../../src/containers/HyperSpotifyWidget.js"],"names":["HyperSpotifyWidgetFactory","React","Component","Icon","TrackInfo","skipActions","previous","next","initialState","isRunning","isPlaying","track","name","artist","props","state","_reactInternalInstance","soundCheck","clearInterval","then","setState","getState","spotifyState","getTrack","catch","togglePlayPause","skipAction","previousTrack","nextTrack","_getSkipPromise","setInterval","performSoundCheck","nextProps","nextState","styles","constrolsContainerStyle","skipTo","iconStyle","togglePlayState","console","log","widgetStyle","renderControls","height","fontSize","display","flexDirection","justifyContent","alignItems","width","marginRight","backgroundColor"],"mappings":"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","file":"HyperSpotifyWidget.js","sourcesContent":["import { isEqual } from 'lodash'\nimport SpotifyManager from '../lib/SpotifyManager'\nimport IconFactory from '../components/Icon'\nimport TrackInfoFactory from '../components/TrackInfo'\n\nconst HyperSpotifyWidgetFactory = (React) => {\n  const { Component } = React\n\n  const Icon = IconFactory(React) // eslint-disable-line no-unused-vars\n  const TrackInfo = TrackInfoFactory(React) // eslint-disable-line no-unused-vars\n\n  const skipActions = {\n    previous: 'PREV',\n    next: 'NEXT'\n  }\n\n  const initialState = {\n    isRunning: false,\n    isPlaying: false,\n    track: {\n      name: '',\n      artist: ''\n    }\n  }\n\n  return class extends Component {\n    constructor (props) {\n      super(props)\n\n      this.state = {\n        isRunning: false,\n        isPlaying: false,\n        track: {\n          name: '',\n          artist: ''\n        }\n      }\n    }\n\n    performSoundCheck () {\n      // console.log('SoundCheck...', new Date(), 'at', this)\n\n      if (!this._reactInternalInstance) {\n        // Kill this interval since its container does not exists anymore\n        if (this.soundCheck) {\n          clearInterval(this.soundCheck)\n        }\n\n        return\n      }\n\n      SpotifyManager.isRunning()\n        .then(isRunning => {\n          this.setState({ isRunning })\n\n          if (isRunning) {\n            // Get Play/Pause state\n            SpotifyManager.getState()\n              .then((spotifyState) => {\n                this.setState({ isPlaying: (spotifyState.state === 'playing') })\n\n                // Get Track details\n                return SpotifyManager.getTrack()\n              })\n              .then((track) => {\n                // console.log('currentTrack', track)\n                this.setState({ track })\n              })\n              .catch(() => {\n                this.setState({ ...initialState })\n              })\n          }\n        })\n        .catch(() => {\n          this.setState({ ...initialState })\n        })\n    }\n\n    togglePlayState () {\n      const { isRunning } = this.state\n\n      if (isRunning) {\n        SpotifyManager.togglePlayPause()\n          .then((spotifyState) => {\n            this.setState({ isPlaying: (spotifyState.state === 'playing') })\n          })\n          .catch(() => {\n            this.setState({ ...initialState })\n          })\n      }\n    }\n\n    _getSkipPromise (skipAction) {\n      const { previous, next } = skipActions\n\n      switch (skipAction) {\n        case previous:\n          return SpotifyManager.previousTrack()\n\n        case next:\n          return SpotifyManager.nextTrack()\n      }\n    }\n\n    skipTo (skipAction) {\n      const { isRunning } = this.state\n\n      if (isRunning) {\n        this._getSkipPromise(skipAction)\n            .then((track) => {\n              // console.log('newTrack', track)\n              this.setState({ track })\n            })\n            .catch(() => {\n              this.setState({ ...initialState })\n            })\n      }\n    }\n\n    componentDidMount () {\n      // console.log('HyperSpotifyWidget didMount')\n\n      if (!this.soundCheck) {\n        this.soundCheck = setInterval(() => this.performSoundCheck(), 5000)\n      }\n\n      this.performSoundCheck()\n    }\n\n    componentWillUnmount () {\n      // console.log('HyperSpotifyWidget willUnmount')\n\n      if (this.soundCheck) {\n        clearInterval(this.soundCheck)\n      }\n    }\n\n    shouldComponentUpdate (nextProps, nextState) {\n      return !isEqual(nextState, this.state)\n    }\n\n    renderControls () {\n      const {\n        previous,\n        next\n      } = skipActions\n\n      const {\n        isRunning,\n        isPlaying\n      } = this.state\n\n      if (isRunning) {\n        return (\n          <div style={styles.constrolsContainerStyle}>\n            <Icon\n              iconName='previous'\n              onClick={() => this.skipTo(previous)}\n              style={styles.iconStyle}\n            />\n\n            <Icon\n              iconName={isPlaying ? 'pause' : 'play'}\n              onClick={() => this.togglePlayState()}\n              style={styles.iconStyle}\n            />\n\n            <Icon\n              iconName='next'\n              onClick={() => this.skipTo(next)}\n              style={styles.iconStyle}\n            />\n          </div>\n        )\n      }\n\n      return (\n        <Icon\n          iconName='spotify'\n          onClick={() => console.log('Start spotify')}\n          style={styles.iconStyle}\n        />\n      )\n    }\n\n    render () {\n      const {\n        track\n      } = this.state\n\n      return (\n        <div style={styles.widgetStyle}>\n          {this.renderControls()}\n          <TrackInfo\n            track={track}\n          />\n        </div>\n      )\n    }\n  }\n}\n\nconst styles = {\n  'widgetStyle': {\n    height: 30,\n    fontSize: 12,\n    display: 'flex',\n    flexDirection: 'row',\n    justifyContent: 'center',\n    alignItems: 'center'\n  },\n  'constrolsContainerStyle': {\n    display: 'flex',\n    flexDirection: 'row',\n    justifyContent: 'center',\n    alignItems: 'center'\n  },\n  'iconStyle': {\n    height: 16,\n    width: 16,\n    marginRight: 6,\n    backgroundColor: '#FFF'\n  }\n}\n\nexport default HyperSpotifyWidgetFactory\n"]}