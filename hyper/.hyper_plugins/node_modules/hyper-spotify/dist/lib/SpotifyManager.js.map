{"version":3,"sources":["../../src/lib/SpotifyManager.js"],"names":["SpotifyManager","resolve","reject","isRunning","err","getState","state","playPause","previous","getTrack","track","next"],"mappings":";;;;;;;;;;;;;;;;;;;;;;AAAA;;;;;;IAEMA,c;;;;;;;gCACgB;AAClB,aAAO,sBAAY,UAAUC,OAAV,EAAmBC,MAAnB,EAA2B;AAC5C,yCAAQC,SAAR,CAAkB,UAACC,GAAD,EAAMD,SAAN,EAAoB;AACpC,cAAIC,GAAJ,EAAS;AACPF,mBAAOE,GAAP;AACD,WAFD,MAEO;AACLH,oBAAQE,SAAR;AACD;AACF,SAND;AAOD,OARM,CAAP;AASD;;;+BAEkB;AACjB,aAAO,sBAAY,UAAUF,OAAV,EAAmBC,MAAnB,EAA2B;AAC5C,yCAAQG,QAAR,CAAiB,UAACD,GAAD,EAAME,KAAN,EAAgB;AAC/B,cAAIF,GAAJ,EAAS;AACPF,mBAAOE,GAAP;AACD,WAFD,MAEO;AACLH,+CAAaK,KAAb;AACD;AACF,SAND;AAOD,OARM,CAAP;AASD;;;sCAEyB;AACxB,aAAO,sBAAY,UAAUL,OAAV,EAAmBC,MAAnB,EAA2B;AAC5C,yCAAQK,SAAR,CAAkB,UAACH,GAAD,EAAS;AACzB,cAAIA,GAAJ,EAAS;AACPF,mBAAOE,GAAP;AACD,WAFD,MAEO;AACL,6CAAQC,QAAR,CAAiB,UAACD,GAAD,EAAME,KAAN,EAAgB;AAC/B,kBAAIF,GAAJ,EAAS;AACPF,uBAAOE,GAAP;AACD,eAFD,MAEO;AACLH,mDAAaK,KAAb;AACD;AACF,aAND;AAOD;AACF,SAZD;AAaD,OAdM,CAAP;AAeD;;;oCAEuB;AACtB,aAAO,sBAAY,UAAUL,OAAV,EAAmBC,MAAnB,EAA2B;AAC5C,yCAAQM,QAAR,CAAiB,UAACJ,GAAD,EAAS;AACxB,cAAIA,GAAJ,EAAS;AACPF,mBAAOE,GAAP;AACD,WAFD,MAEO;AACL,6CAAQK,QAAR,CAAiB,UAACL,GAAD,EAAMM,KAAN,EAAgB;AAC/B,kBAAIN,GAAJ,EAAS;AACPF,uBAAOE,GAAP;AACD,eAFD,MAEO;AACLH,mDAAaS,KAAb;AACD;AACF,aAND;AAOD;AACF,SAZD;AAaD,OAdM,CAAP;AAeD;;;gCAEmB;AAClB,aAAO,sBAAY,UAAUT,OAAV,EAAmBC,MAAnB,EAA2B;AAC5C,yCAAQS,IAAR,CAAa,UAACP,GAAD,EAAS;AACpB,cAAIA,GAAJ,EAAS;AACPF,mBAAOE,GAAP;AACD,WAFD,MAEO;AACL,6CAAQK,QAAR,CAAiB,UAACL,GAAD,EAAMM,KAAN,EAAgB;AAC/B,kBAAIN,GAAJ,EAAS;AACPF,uBAAOE,GAAP;AACD,eAFD,MAEO;AACLH,mDAAaS,KAAb;AACD;AACF,aAND;AAOD;AACF,SAZD;AAaD,OAdM,CAAP;AAeD;;;+BAEkB;AACjB,aAAO,sBAAY,UAAUT,OAAV,EAAmBC,MAAnB,EAA2B;AAC5C,yCAAQO,QAAR,CAAiB,UAACL,GAAD,EAAMM,KAAN,EAAgB;AAC/B,cAAIN,GAAJ,EAAS;AACPF,mBAAOE,GAAP;AACD,WAFD,MAEO;AACLH,+CAAaS,KAAb;AACD;AACF,SAND;AAOD,OARM,CAAP;AASD;;;;;kBAGYV,c","file":"SpotifyManager.js","sourcesContent":["import spotify from 'spotify-node-applescript'\n\nclass SpotifyManager {\n  static isRunning () {\n    return new Promise(function (resolve, reject) {\n      spotify.isRunning((err, isRunning) => {\n        if (err) {\n          reject(err)\n        } else {\n          resolve(isRunning)\n        }\n      })\n    })\n  }\n\n  static getState () {\n    return new Promise(function (resolve, reject) {\n      spotify.getState((err, state) => {\n        if (err) {\n          reject(err)\n        } else {\n          resolve({ ...state })\n        }\n      })\n    })\n  }\n\n  static togglePlayPause () {\n    return new Promise(function (resolve, reject) {\n      spotify.playPause((err) => {\n        if (err) {\n          reject(err)\n        } else {\n          spotify.getState((err, state) => {\n            if (err) {\n              reject(err)\n            } else {\n              resolve({ ...state })\n            }\n          })\n        }\n      })\n    })\n  }\n\n  static previousTrack () {\n    return new Promise(function (resolve, reject) {\n      spotify.previous((err) => {\n        if (err) {\n          reject(err)\n        } else {\n          spotify.getTrack((err, track) => {\n            if (err) {\n              reject(err)\n            } else {\n              resolve({ ...track })\n            }\n          })\n        }\n      })\n    })\n  }\n\n  static nextTrack () {\n    return new Promise(function (resolve, reject) {\n      spotify.next((err) => {\n        if (err) {\n          reject(err)\n        } else {\n          spotify.getTrack((err, track) => {\n            if (err) {\n              reject(err)\n            } else {\n              resolve({ ...track })\n            }\n          })\n        }\n      })\n    })\n  }\n\n  static getTrack () {\n    return new Promise(function (resolve, reject) {\n      spotify.getTrack((err, track) => {\n        if (err) {\n          reject(err)\n        } else {\n          resolve({ ...track })\n        }\n      })\n    })\n  }\n}\n\nexport default SpotifyManager\n"]}