'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _extends2 = require('babel-runtime/helpers/extends');

var _extends3 = _interopRequireDefault(_extends2);

var _promise = require('babel-runtime/core-js/promise');

var _promise2 = _interopRequireDefault(_promise);

var _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _createClass2 = require('babel-runtime/helpers/createClass');

var _createClass3 = _interopRequireDefault(_createClass2);

var _spotifyNodeApplescript = require('spotify-node-applescript');

var _spotifyNodeApplescript2 = _interopRequireDefault(_spotifyNodeApplescript);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var SpotifyManager = function () {
  function SpotifyManager() {
    (0, _classCallCheck3.default)(this, SpotifyManager);
  }

  (0, _createClass3.default)(SpotifyManager, null, [{
    key: 'isRunning',
    value: function isRunning() {
      return new _promise2.default(function (resolve, reject) {
        _spotifyNodeApplescript2.default.isRunning(function (err, isRunning) {
          if (err) {
            reject(err);
          } else {
            resolve(isRunning);
          }
        });
      });
    }
  }, {
    key: 'getState',
    value: function getState() {
      return new _promise2.default(function (resolve, reject) {
        _spotifyNodeApplescript2.default.getState(function (err, state) {
          if (err) {
            reject(err);
          } else {
            resolve((0, _extends3.default)({}, state));
          }
        });
      });
    }
  }, {
    key: 'togglePlayPause',
    value: function togglePlayPause() {
      return new _promise2.default(function (resolve, reject) {
        _spotifyNodeApplescript2.default.playPause(function (err) {
          if (err) {
            reject(err);
          } else {
            _spotifyNodeApplescript2.default.getState(function (err, state) {
              if (err) {
                reject(err);
              } else {
                resolve((0, _extends3.default)({}, state));
              }
            });
          }
        });
      });
    }
  }, {
    key: 'previousTrack',
    value: function previousTrack() {
      return new _promise2.default(function (resolve, reject) {
        _spotifyNodeApplescript2.default.previous(function (err) {
          if (err) {
            reject(err);
          } else {
            _spotifyNodeApplescript2.default.getTrack(function (err, track) {
              if (err) {
                reject(err);
              } else {
                resolve((0, _extends3.default)({}, track));
              }
            });
          }
        });
      });
    }
  }, {
    key: 'nextTrack',
    value: function nextTrack() {
      return new _promise2.default(function (resolve, reject) {
        _spotifyNodeApplescript2.default.next(function (err) {
          if (err) {
            reject(err);
          } else {
            _spotifyNodeApplescript2.default.getTrack(function (err, track) {
              if (err) {
                reject(err);
              } else {
                resolve((0, _extends3.default)({}, track));
              }
            });
          }
        });
      });
    }
  }, {
    key: 'getTrack',
    value: function getTrack() {
      return new _promise2.default(function (resolve, reject) {
        _spotifyNodeApplescript2.default.getTrack(function (err, track) {
          if (err) {
            reject(err);
          } else {
            resolve((0, _extends3.default)({}, track));
          }
        });
      });
    }
  }]);
  return SpotifyManager;
}();

exports.default = SpotifyManager;
//# sourceMappingURL=SpotifyManager.js.map